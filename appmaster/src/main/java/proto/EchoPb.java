// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Echo.proto

package proto;

public final class EchoPb {
  private EchoPb() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf service {@code EchoService}
   */
  public static abstract class EchoService
      implements com.google.protobuf.Service {
    protected EchoService() {}

    public interface Interface {
      /**
       * <code>rpc echo(.EchoRequestProto) returns (.EchoResponseProto);</code>
       */
      public abstract void echo(
          com.google.protobuf.RpcController controller,
          proto.EchoMsg.EchoRequestProto request,
          com.google.protobuf.RpcCallback<proto.EchoMsg.EchoResponseProto> done);

      /**
       * <code>rpc close(.CloseRequestProto) returns (.CloseResponseProto);</code>
       */
      public abstract void close(
          com.google.protobuf.RpcController controller,
          proto.EchoMsg.CloseRequestProto request,
          com.google.protobuf.RpcCallback<proto.EchoMsg.CloseResponseProto> done);

    }

    public static com.google.protobuf.Service newReflectiveService(
        final Interface impl) {
      return new EchoService() {
        @java.lang.Override
        public  void echo(
            com.google.protobuf.RpcController controller,
            proto.EchoMsg.EchoRequestProto request,
            com.google.protobuf.RpcCallback<proto.EchoMsg.EchoResponseProto> done) {
          impl.echo(controller, request, done);
        }

        @java.lang.Override
        public  void close(
            com.google.protobuf.RpcController controller,
            proto.EchoMsg.CloseRequestProto request,
            com.google.protobuf.RpcCallback<proto.EchoMsg.CloseResponseProto> done) {
          impl.close(controller, request, done);
        }

      };
    }

    public static com.google.protobuf.BlockingService
        newReflectiveBlockingService(final BlockingInterface impl) {
      return new com.google.protobuf.BlockingService() {
        public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }

        public final com.google.protobuf.Message callBlockingMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request)
            throws com.google.protobuf.ServiceException {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.callBlockingMethod() given method descriptor for " +
              "wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return impl.echo(controller, (proto.EchoMsg.EchoRequestProto)request);
            case 1:
              return impl.close(controller, (proto.EchoMsg.CloseRequestProto)request);
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

        public final com.google.protobuf.Message
            getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getRequestPrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return proto.EchoMsg.EchoRequestProto.getDefaultInstance();
            case 1:
              return proto.EchoMsg.CloseRequestProto.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

        public final com.google.protobuf.Message
            getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getResponsePrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return proto.EchoMsg.EchoResponseProto.getDefaultInstance();
            case 1:
              return proto.EchoMsg.CloseResponseProto.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

      };
    }

    /**
     * <code>rpc echo(.EchoRequestProto) returns (.EchoResponseProto);</code>
     */
    public abstract void echo(
        com.google.protobuf.RpcController controller,
        proto.EchoMsg.EchoRequestProto request,
        com.google.protobuf.RpcCallback<proto.EchoMsg.EchoResponseProto> done);

    /**
     * <code>rpc close(.CloseRequestProto) returns (.CloseResponseProto);</code>
     */
    public abstract void close(
        com.google.protobuf.RpcController controller,
        proto.EchoMsg.CloseRequestProto request,
        com.google.protobuf.RpcCallback<proto.EchoMsg.CloseResponseProto> done);

    public static final
        com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptor() {
      return proto.EchoPb.getDescriptor().getServices().get(0);
    }
    public final com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }

    public final void callMethod(
        com.google.protobuf.Descriptors.MethodDescriptor method,
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Message request,
        com.google.protobuf.RpcCallback<
          com.google.protobuf.Message> done) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.callMethod() given method descriptor for wrong " +
          "service type.");
      }
      switch(method.getIndex()) {
        case 0:
          this.echo(controller, (proto.EchoMsg.EchoRequestProto)request,
            com.google.protobuf.RpcUtil.<proto.EchoMsg.EchoResponseProto>specializeCallback(
              done));
          return;
        case 1:
          this.close(controller, (proto.EchoMsg.CloseRequestProto)request,
            com.google.protobuf.RpcUtil.<proto.EchoMsg.CloseResponseProto>specializeCallback(
              done));
          return;
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public final com.google.protobuf.Message
        getRequestPrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getRequestPrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return proto.EchoMsg.EchoRequestProto.getDefaultInstance();
        case 1:
          return proto.EchoMsg.CloseRequestProto.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public final com.google.protobuf.Message
        getResponsePrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getResponsePrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return proto.EchoMsg.EchoResponseProto.getDefaultInstance();
        case 1:
          return proto.EchoMsg.CloseResponseProto.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public static Stub newStub(
        com.google.protobuf.RpcChannel channel) {
      return new Stub(channel);
    }

    public static final class Stub extends proto.EchoPb.EchoService implements Interface {
      private Stub(com.google.protobuf.RpcChannel channel) {
        this.channel = channel;
      }

      private final com.google.protobuf.RpcChannel channel;

      public com.google.protobuf.RpcChannel getChannel() {
        return channel;
      }

      public  void echo(
          com.google.protobuf.RpcController controller,
          proto.EchoMsg.EchoRequestProto request,
          com.google.protobuf.RpcCallback<proto.EchoMsg.EchoResponseProto> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          proto.EchoMsg.EchoResponseProto.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            proto.EchoMsg.EchoResponseProto.class,
            proto.EchoMsg.EchoResponseProto.getDefaultInstance()));
      }

      public  void close(
          com.google.protobuf.RpcController controller,
          proto.EchoMsg.CloseRequestProto request,
          com.google.protobuf.RpcCallback<proto.EchoMsg.CloseResponseProto> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          proto.EchoMsg.CloseResponseProto.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            proto.EchoMsg.CloseResponseProto.class,
            proto.EchoMsg.CloseResponseProto.getDefaultInstance()));
      }
    }

    public static BlockingInterface newBlockingStub(
        com.google.protobuf.BlockingRpcChannel channel) {
      return new BlockingStub(channel);
    }

    public interface BlockingInterface {
      public proto.EchoMsg.EchoResponseProto echo(
          com.google.protobuf.RpcController controller,
          proto.EchoMsg.EchoRequestProto request)
          throws com.google.protobuf.ServiceException;

      public proto.EchoMsg.CloseResponseProto close(
          com.google.protobuf.RpcController controller,
          proto.EchoMsg.CloseRequestProto request)
          throws com.google.protobuf.ServiceException;
    }

    private static final class BlockingStub implements BlockingInterface {
      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
        this.channel = channel;
      }

      private final com.google.protobuf.BlockingRpcChannel channel;

      public proto.EchoMsg.EchoResponseProto echo(
          com.google.protobuf.RpcController controller,
          proto.EchoMsg.EchoRequestProto request)
          throws com.google.protobuf.ServiceException {
        return (proto.EchoMsg.EchoResponseProto) channel.callBlockingMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          proto.EchoMsg.EchoResponseProto.getDefaultInstance());
      }


      public proto.EchoMsg.CloseResponseProto close(
          com.google.protobuf.RpcController controller,
          proto.EchoMsg.CloseRequestProto request)
          throws com.google.protobuf.ServiceException {
        return (proto.EchoMsg.CloseResponseProto) channel.callBlockingMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          proto.EchoMsg.CloseResponseProto.getDefaultInstance());
      }

    }

    // @@protoc_insertion_point(class_scope:EchoService)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\nEcho.proto\032\rEchoMsg.proto2n\n\013EchoServi" +
      "ce\022-\n\004echo\022\021.EchoRequestProto\032\022.EchoResp" +
      "onseProto\0220\n\005close\022\022.CloseRequestProto\032\023" +
      ".CloseResponseProtoB\025\n\005protoB\006EchoPb\210\001\001\240" +
      "\001\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          proto.EchoMsg.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
